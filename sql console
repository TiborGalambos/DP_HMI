CREATE TABLE Stops (
    stop_id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6)
);

CREATE TABLE Routes (
    route_id SERIAL PRIMARY KEY,
    start_stop_id INT REFERENCES Stops(stop_id),
    end_stop_id INT REFERENCES Stops(stop_id)
);

CREATE TABLE Route_Stops (
    route_stop_id SERIAL PRIMARY KEY,
    route_id INT REFERENCES Routes(route_id),
    stop_id INT REFERENCES Stops(stop_id),
    stop_sequence INT
);

CREATE TABLE Schedules (
    schedule_id SERIAL PRIMARY KEY,
    route_stop_id INT REFERENCES Route_Stops(route_stop_id),
    arrival_time TIME
);
-- New Trips Table
CREATE TABLE Trips (
    trip_id SERIAL PRIMARY KEY,
    route_id INT REFERENCES Routes(route_id),
    trip_name VARCHAR(255)
);
-- Indexes for optimization
CREATE INDEX idx_route_stops ON Route_Stops(route_id, stop_sequence);
CREATE INDEX idx_schedules ON Schedules(route_stop_id, arrival_time);


ALTER TABLE Schedules DROP COLUMN route_stop_id;
ALTER TABLE Schedules ADD COLUMN trip_id INT REFERENCES Trips(trip_id);
ALTER TABLE Schedules ADD COLUMN stop_id INT REFERENCES Stops(stop_id);



INSERT INTO Stops (name) VALUES ('Galanta');
INSERT INTO Stops (name) VALUES ('Sládkovičovo');
INSERT INTO Stops (name) VALUES ('Pusté Úľany');
INSERT INTO Stops (name) VALUES ('Reca');
INSERT INTO Stops (name) VALUES ('Senec');
INSERT INTO Stops (name) VALUES ('Veľký Biel');
INSERT INTO Stops (name) VALUES ('Bernolákovo');
INSERT INTO Stops (name) VALUES ('Ivanka pri Dunaji');
INSERT INTO Stops (name) VALUES ('Bratislava-Vajnory');
INSERT INTO Stops (name) VALUES ('Bratislava-Vinohrady');
INSERT INTO Stops (name) VALUES ('Bratislava hl.st.');

INSERT INTO Routes (start_stop_id, end_stop_id) VALUES (1, 11) RETURNING route_id;

INSERT INTO Route_Stops (route_id, stop_id, stop_sequence) VALUES
(2, 1, 1),
(2, 2, 2),
(2, 3, 3),
(2, 4, 4),
(2, 5, 5),
(2, 6, 6),
(2, 7, 7),
(2, 8, 8),
(2, 9, 9),
(2, 10, 10),
(2, 11, 11);


INSERT INTO Trips (route_id, trip_name) VALUES (2, 'Os 4718') RETURNING trip_id;

INSERT INTO Schedules (trip_id, stop_id, arrival_time) VALUES
(1, 1, '13:04:00'),
(1, 2, '13:09:00'),
(1, 3, '13:15:00'),
(1, 4, '13:20:00'),
(1, 5, '13:23:00'),
(1, 6, '13:28:00'),
(1, 7, '13:32:00'),
(1, 8, '13:36:00'),
(1, 9, '13:40:00'),
(1, 10, '13:44:00'),
(1, 11, '13:51:00');


INSERT INTO Trips (route_id, trip_name)
SELECT route_id, 'Os 4736' -- Replace with your desired trip name
FROM Trips
WHERE trip_id = 1 -- Replace with the actual ID of the trip you're replicating
RETURNING trip_id;

INSERT INTO Schedules (trip_id, stop_id, arrival_time)
SELECT 11, stop_id, arrival_time + INTERVAL '1 hour' -- Replace new_trip_id with the ID returned from the previous query
FROM Schedules
WHERE trip_id = 10; -- Replace existing_trip_id with the actual ID of the trip you're replicating - trip_id hours + 1



SELECT * FROM Stops WHERE name IN ('Galanta', 'Sládkovičovo', 'Pusté Úľany', 'Reca', 'Senec', 'Veľký Biel', 'Bernolákovo', 'Ivanka pri Dunaji', 'Bratislava-Vajnory', 'Bratislava-Vinohrady', 'Bratislava hl.st.');
SELECT * FROM Routes WHERE start_stop_id = (SELECT stop_id FROM Stops WHERE name = 'Galanta') AND end_stop_id = (SELECT stop_id FROM Stops WHERE name = 'Bratislava hl.st.');
SELECT rs.*, s.name FROM Route_Stops rs JOIN Stops s ON rs.stop_id = s.stop_id WHERE rs.route_id = 2 ORDER BY rs.stop_sequence;
SELECT * FROM Trips WHERE route_id = 2;

SELECT
    s.name AS stop_name,
    sch.arrival_time
FROM
    Schedules sch
JOIN
    Trips t ON sch.trip_id = t.trip_id
JOIN
    Stops s ON sch.stop_id = s.stop_id
WHERE
    t.trip_name LIKE '%4722%'
ORDER BY
    sch.arrival_time;



SELECT
    t.trip_name,
    first_stop.name AS start_stop,
    last_stop.name AS end_stop,
    first_schedule.arrival_time AS start_arrival_time,
    last_schedule.arrival_time AS end_arrival_time
FROM
    Trips t
LEFT JOIN LATERAL (
    SELECT
        s.stop_id,
        sch.arrival_time
    FROM
        Schedules sch
    JOIN
        Stops s ON sch.stop_id = s.stop_id
    WHERE
        sch.trip_id = t.trip_id
    ORDER BY
        sch.arrival_time
    LIMIT 1
) first_schedule ON TRUE
LEFT JOIN Stops first_stop ON first_schedule.stop_id = first_stop.stop_id
LEFT JOIN LATERAL (
    SELECT
        s.stop_id,
        sch.arrival_time
    FROM
        Schedules sch
    JOIN
        Stops s ON sch.stop_id = s.stop_id
    WHERE
        sch.trip_id = t.trip_id
    ORDER BY
        sch.arrival_time DESC
    LIMIT 1
) last_schedule ON TRUE
LEFT JOIN Stops last_stop ON last_schedule.stop_id = last_stop.stop_id;


--all trips with names, first/last stops and their time fixed.
SELECT
    t.trip_name,
    fs.name AS first_stop_name,
    ls.name AS last_stop_name,
    fst.arrival_time AS first_stop_time,
    lst.arrival_time AS last_stop_time
FROM
    trips t
JOIN
    routes r ON t.route_id = r.route_id
JOIN
    stops fs ON r.start_stop_id = fs.stop_id
JOIN
    stops ls ON r.end_stop_id = ls.stop_id
JOIN
    schedules fst ON fs.stop_id = fst.stop_id
JOIN
    schedules lst ON ls.stop_id = lst.stop_id
WHERE
    fst.trip_id = t.trip_id AND
    lst.trip_id = t.trip_id
ORDER BY
    t.trip_id, fst.arrival_time, lst.arrival_time;
